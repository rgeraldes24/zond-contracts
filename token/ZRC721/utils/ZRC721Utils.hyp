// SPDX-License-Identifier: MIT
// Zond Contracts (last updated v0.1.0) (token/ZRC721/utils/ZRC721Utils.hyp)

pragma hyperion >=0.0;

import {IZRC721Receiver} from "../IZRC721Receiver.hyp";
import {IZRC721Errors} from "../../../interfaces/draft-IZRC6093.hyp";

/**
 * @dev Library that provide common ZRC-721 utility functions.
 *
 * See https://eips.ethereum.org/EIPS/eip-721[ZRC-721].
 *
 * _Available since v5.1._
 */
library ZRC721Utils {
    /**
     * @dev Performs an acceptance check for the provided `operator` by calling {IZRC721Receiver-onZRC721Received}
     * on the `to` address. The `operator` is generally the address that initiated the token transfer (i.e. `msg.sender`).
     *
     * The acceptance call is not executed and treated as a no-op if the target address doesn't contain code (i.e. an EOA).
     * Otherwise, the recipient must implement {IZRC721Receiver-onZRC721Received} and return the acceptance magic value to accept
     * the transfer.
     */
    function checkOnZRC721Received(
        address operator,
        address from,
        address to,
        uint256 tokenId,
        bytes memory data
    ) internal {
        if (to.code.length > 0) {
            try IZRC721Receiver(to).onZRC721Received(operator, from, tokenId, data) returns (bytes4 retval) {
                if (retval != IZRC721Receiver.onZRC721Received.selector) {
                    // Token rejected
                    revert IZRC721Errors.ZRC721InvalidReceiver(to);
                }
            } catch (bytes memory reason) {
                if (reason.length == 0) {
                    // non-IZRC721Receiver implementer
                    revert IZRC721Errors.ZRC721InvalidReceiver(to);
                } else {
                    assembly ("memory-safe") {
                        revert(add(32, reason), mload(reason))
                    }
                }
            }
        }
    }
}
